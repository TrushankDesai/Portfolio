-- We want to reward our users who have been around the longest. 
-- Find the 5 oldest users for this.

SELECT
  *
FROM
  users
ORDER BY
  created_at DESC
LIMIT
  5;
  
  

-- What day of the week do most users register on?
-- We need to figure out when to schedule an ad campgain

SELECT
  dayname(created_at),
  count(*)
FROM
  users
GROUP BY
  created_at
ORDER BY
  created_at DESC;
  
  

-- We want to target our inactive users with an email campaign.
-- Find the users who have never posted a photo

SELECT
  username,
  IFNULL(image_url, 'Not posted yet') AS posts
FROM
  users
  LEFT JOIN photos ON users.id = photos.user_id
WHERE
  image_url IS NULL;
  
  

-- We're running a new contest to see who can get the most likes on a single photo.
-- WHO WON??!!

SELECT
  username,
  users.id,
  Image_url,
  count(photo_id) AS No_of_likes
FROM
  likes
  LEFT JOIN photos ON photos.id = likes.photo_id
  INNER JOIN users ON photos.user_id = users.id
GROUP BY
  photo_id
ORDER BY
  No_of_likes DESC
LIMIT
  1;
  
  

-- Our Investors want to know...
-- How many times does the average user post?

-- number of posts by each user
SELECT
  user_id,
  image_url,
  count(Image_url) AS posts
FROM
  photos
GROUP BY
  user_id
ORDER BY
  posts DESC;
  
  

-- Avg number of photos overall total users/ total photos 

SELECT
  (
    SELECT
      count(*)
    FROM
      photos
  ) /(
    SELECT
      count(*)
    FROM
      users
  ) AS AVG_posts_per_user;
  
  

-- A brand wants to know which hashtags to use in a post
-- What are the top 5 most commonly used hashtags?

SELECT
  tag_name,
  count(*) AS times_used
FROM
  photo_Tags
  JOIN tags ON photo_Tags.tag_id = tags.id
GROUP BY
  tags.id
ORDER BY
  times_used DESC
LIMIT
  5;
  
  

-- We have a small problem with bots on our site...
-- Find users who have liked every single photo on the site

SELECT
  username,
  count(*) AS num_likes
FROM
  users
  LEFT JOIN likes ON users.id = likes.user_id
GROUP BY
  username
HAVING
  num_likes = (
    SELECT
      count(*)
    FROM
      photos
  );
  
  

-- We also have a problem with celebrities
-- F0ind users who have never commented on a photo

SELECT
  username,
  comment_text
FROM
  users
  LEFT JOIN comments ON users.id = comments.user_id
WHERE
  comments.user_id IS NULL;
  
  

-- Are we overrun with bots and celebrity accounts?
-- Find the percentage of our users who have either never commented on a photo or have commented on every photo

SELECT
  CONCAT(
    (
      (
        (
          SELECT
            COUNT(*)
          FROM
            (
              SELECT
                COUNT(*) AS total,
                users.id
              FROM
                users
                JOIN comments ON comments.user_id = users.id
              GROUP BY
                comments.user_id
              HAVING
                total = (
                  SELECT
                    COUNT(DISTINCT comments.photo_id)
                  FROM
                    comments
                )
            ) a
        ) + (
          SELECT
            COUNT(*)
          FROM
            users
          WHERE
            id NOT IN (
              SELECT
                comments.user_id
              FROM
                comments
            )
        )
      ) / (
        SELECT
          count(*)
        FROM
          users
      )
    ) * 100,
    '%'
  ) AS percent_of_comment_and_non_comment_users;
